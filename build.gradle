/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
}

java.sourceCompatibility = JavaVersion.VERSION_17

import java.nio.file.Files
import java.nio.file.StandardCopyOption
import org.apache.tools.ant.taskdefs.condition.Os


def downloadsBase = new File(gradle.gradleUserHomeDir, "caches/downloads")
def ditaOtVersion = project.property("ditaOtVersion")
def ditaOtCacheDir = new File(downloadsBase, "dita")
def ditaOtFileName = "dita-ot-${ditaOtVersion}"
def ditaOtZip = new File(ditaOtCacheDir, "${ditaOtFileName}.zip")
def ditaOtDir = file("${buildDir}/${ditaOtFileName}")
def ditaPluginSrcDir = file("src/main/plugin")
def ditaPluginTargetDir = file("${ditaOtDir}/plugins/${project.name}")
def ditaOtPluginsInstalled = file("${buildDir}/.installed")
def xspecTestsDir = file("src/test/xspec")
def xspecTests = fileTree(xspecTestsDir) {
    include "**/*.xspec"
    exclude "**/*.module.xspec"
}
def xspecResultDir = file("${buildDir}/xspec")
def ditaProjectFile = file("dita-project.xml")
def ditaOutputDir = file("${buildDir}/out")
def ditaSourceDir = file("src/main/content")
def xspecVersion = project.property("xspecVersion")
def xspecCacheDir = new File(downloadsBase, "xspec")
def xspecFileName = "xspec-${xspecVersion}"
def xspecZip = new File(xspecCacheDir, "${xspecFileName}.zip")
def xspecDir = file("${buildDir}/${xspecFileName}")
def xspecBin = file("${xspecDir}/bin/xspec.sh")
def saxonVersion = project.property("saxonVersion")
def saxonCacheDir = new File(downloadsBase, "saxon")
def saxonZip = new File(saxonCacheDir, "SaxonHE${saxonVersion}J.zip")
def saxonDir = file("${buildDir}/saxon-${saxonVersion}")

tasks.register("downloadXSpec") {
    group = "setup"
    description = "Download XSpec"
    inputs.property "xspecVersion", xspecVersion
    outputs.file xspecZip

    doLast{
       xspecCacheDir.mkdirs()
        if (!xspecZip.exists()) {
            def url = new URL("https://github.com/xspec/xspec/archive/refs/tags/v${xspecVersion}.zip")
            url.withInputStream { stream ->
                Files.copy(stream, xspecZip.toPath(), StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}

tasks.register("unpackXSpec", Copy) {
    group = "setup"
    description = "Unpack XSpec to the build directory"
    dependsOn "downloadXSpec"
    from(zipTree(xspecZip)) {
        eachFile { fileCopyDetails ->
            def segments = fileCopyDetails.relativePath.segments
                fileCopyDetails.relativePath = new RelativePath(true, *segments.drop(1))
        }
    }
    into xspecDir
    inputs.file xspecZip
    outputs.dir xspecDir
}


tasks.register("downloadSaxon") {
    group = "setup"
    description = "Download Saxon-HE"
    inputs.property "saxonVersion", saxonVersion
    outputs.file saxonZip
    doLast{
        saxonCacheDir.mkdirs()
        if (!saxonZip.exists()) {
            def url = new URL("https://github.com/Saxonica/Saxon-HE/releases/download/SaxonHE${saxonVersion}/SaxonHE${saxonVersion}J.zip")
            url.withInputStream { stream ->
                Files.copy(stream, saxonZip.toPath(), StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}

tasks.register("unpackSaxon", Copy) {
    group = "setup"
    description = "Unpack Saxon-HE to the build directory"
    dependsOn "downloadSaxon"
    from zipTree(saxonZip)
    into saxonDir
    inputs.file saxonZip
    outputs.dir saxonDir
}

tasks.register('downloadDitaOt') {
    group = "setup"
    description = "Download DITA-OT"
    inputs.property "ditaOtVersion", ditaOtVersion
    outputs.file ditaOtZip
    doLast{
        ditaOtCacheDir.mkdirs()
        if (!ditaOtZip.exists()) {
            def url = new URL("https://github.com/dita-ot/dita-ot/releases/download/${ditaOtVersion}/dita-ot-${ditaOtVersion}.zip")
            url.withInputStream { stream ->
                Files.copy(stream, ditaOtZip.toPath(), StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}

tasks.register('unpackDitaOt', Copy) {
    group = "setup"
    description = "Unpack DITA-OT to the build directory"
    dependsOn 'downloadDitaOt'
    from(zipTree(ditaOtZip)) {
        eachFile { fileCopyDetails ->
            def segments = fileCopyDetails.relativePath.segments
                fileCopyDetails.relativePath = new RelativePath(true, *segments.drop(1))
        }
    }
    into ditaOtDir
    inputs.file ditaOtZip
    outputs.file file("${ditaOtDir}/bin/dita")
}

tasks.register('copyPluginToDitaOt', Copy) {
    group = "setup"
    description = "Copy the plugin to DITA-OT"
    dependsOn 'unpackDitaOt'
    from ditaPluginSrcDir
    into ditaPluginTargetDir
    inputs.dir ditaPluginSrcDir
    outputs.dir ditaPluginTargetDir
}

tasks.register('ditaInstall', Exec) {
    group = "setup"
    description = "Install the plugin into DITA-OT"
    dependsOn 'copyPluginToDitaOt'
    inputs.dir ditaPluginTargetDir
    inputs.dir ditaPluginSrcDir
    outputs.file file("${ditaOtDir}/build.xml")

    workingDir ditaOtDir
    commandLine "${ditaOtDir}/bin/dita" + (Os.isFamily(Os.FAMILY_WINDOWS) ? ".bat" : ""), "install"
}

tasks.register('runDitaProjectCv', Exec) {
    group = "build"
    description = "Run DITA-OT to generate CV"
    dependsOn 'ditaInstall'
    inputs.file ditaProjectFile
    inputs.dir ditaPluginTargetDir
    inputs.files fileTree(ditaSourceDir) {
        include 'main.ditamap'
        include 'keys.ditamap'
        include 'related-links.dita'
        include 'cv.dita'
        include 'cv_content.dita'
        include 'profile_picture.png'
        include 'profile.jpg'
    }
    outputs.dir ditaOutputDir
    outputs.file file("${ditaOutputDir}/cv.pdf")

    commandLine "${ditaOtDir}/bin/dita" + (Os.isFamily(Os.FAMILY_WINDOWS) ? ".bat" : ""), 
                "--project=${ditaProjectFile}",
                "--deliverable=cv",
                "--output=${buildDir}/out"
}

tasks.register('runDitaProjectCoverLetter', Exec) {
    group = "build"
    description = "Run DITA-OT to generate Cover Letter"
    dependsOn 'ditaInstall'
    inputs.file ditaProjectFile
    inputs.dir ditaPluginTargetDir
    inputs.files fileTree(ditaSourceDir) {
        include 'main.ditamap'
        include 'keys.ditamap'
        include 'related-links.dita'
        include 'cover_letter.dita'
        include 'cover_letter_content.dita'
    }
    outputs.dir ditaOutputDir
    outputs.file file("${ditaOutputDir}/cover_letter.pdf")

    commandLine "${ditaOtDir}/bin/dita" + (Os.isFamily(Os.FAMILY_WINDOWS) ? ".bat" : ""),
                "--project=${ditaProjectFile}",
                "--deliverable=cover_letter",
                "--output=${buildDir}/out"
}

tasks.register('runDitaProject') {
    group = "build"
    description = "Run DITA-OT to generate CV and Cover Letter"
    dependsOn 'runDitaProjectCv', 'runDitaProjectCoverLetter'
}

xspecTests.each { xspecFile ->
    def baseName = xspecFile.name.replaceFirst(/\.xspec$/, "")
    def htmlOut = new File(xspecResultDir, "${baseName}-result.html")
    def junitOut = new File(xspecResultDir, "${baseName}-junit.xml")

    tasks.register("runXSpec_${baseName}", Exec) {
        group = "verification"
        description = "Run XSpec tests for ${baseName}"
        inputs.dir xspecTestsDir
        inputs.dir ditaPluginSrcDir
        outputs.files htmlOut, junitOut
        dependsOn "unpackXSpec"

        environment "SAXON_HOME", saxonDir.absolutePath
        environment "TEST_DIR", "${buildDir}/xspec"
        commandLine xspecBin.absolutePath, "-j", xspecFile.absolutePath

        doLast {
            def xml = new XmlSlurper().parse(junitOut)
            def failures = xml.depthFirst().findAll { it.@status == 'failed' }.size()
            if (failures) {
                throw new GradleException("XSpec test failure(s) found in ${baseName}")
            }
        }
    }
}

tasks.register("runXSpec") {
    group = "verification"
    description = "Run all XSpec tests"
    inputs.dir xspecTestsDir
    inputs.dir ditaPluginSrcDir
    outputs.dir xspecResultDir
    dependsOn "unpackXSpec", "unpackSaxon", tasks.matching { it.name.startsWith("runXSpec_") }
}

tasks.register('packagePlugin', Zip) {
    group = "build"
    description = "Package the plugin for distribution"
    dependsOn 'runXSpec'
    from ditaPluginSrcDir
    archiveFileName.set("${project.name}.zip")
    destinationDirectory.set(file("${buildDir}/dist"))
}

tasks.register('prepareDitaOt') {
    group = "setup"
    description = "Prepare DITA-OT for rendering"
    dependsOn 'ditaInstall'
}

tasks.register('runBuild') {
    group = "build"
    description = "Run the build process"
    dependsOn 'runDitaProject', 'runXSpec', 'packagePlugin'
}

